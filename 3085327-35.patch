diff --git a/src/DeprecationAnalyzer.php b/src/DeprecationAnalyzer.php
index a7c15ee..8efafb7 100644
--- a/src/DeprecationAnalyzer.php
+++ b/src/DeprecationAnalyzer.php
@@ -156,6 +156,8 @@ final class DeprecationAnalyzer {
    */
   public function analyze(Extension $extension) {
     $project_dir = DRUPAL_ROOT . '/' . $extension->subpath;
+    $this->logger->notice('Processing %path.', ['%path' => $project_dir]);
+
     $output = [];
     exec($this->vendorPath . '/bin/phpstan analyse --error-format=json -c ' . $this->phpstanNeonPath . ' ' . $project_dir, $output);
     $json = json_decode(join('', $output), TRUE);
@@ -273,7 +275,7 @@ final class DeprecationAnalyzer {
     $success = $this->fileSystem->prepareDirectory($this->upgradeStatusTemporaryDirectory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
 
     if (!$success) {
-      $this->logger->error($this->t("Unable to create temporary directory for Upgrade Status: @directory.", ['@directory' => $this->upgradeStatusTemporaryDirectory]));
+      $this->logger->error('Unable to create temporary directory for Upgrade Status: %directory.', ['%directory' => $this->upgradeStatusTemporaryDirectory]);
       return $success;
     }
 
@@ -281,7 +283,7 @@ final class DeprecationAnalyzer {
     $success = $this->fileSystem->prepareDirectory($phpstan_cache_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
 
     if (!$success) {
-      $this->logger->error($this->t("Unable to create temporary directory for PHPStan: @directory.", ['@directory' => $phpstan_cache_directory]));
+      $this->logger->error('Unable to create temporary directory for PHPStan: %directory.', ['%directory' => $phpstan_cache_directory]);
     }
 
     return $success;
@@ -306,7 +308,7 @@ final class DeprecationAnalyzer {
       $this->vendorPath . "/phpstan/phpstan-deprecation-rules/rules.neon'\n";
     $success = file_put_contents($this->phpstanNeonPath, $config);
     if (!$success) {
-      $this->logger->error($this->t("Couldn't write configuration for PHPStan: @file.", ['@file' => $this->phpstanNeonPath]));
+      $this->logger->error('Unable to write configuration for PHPStan: %file.', ['%file' => $this->phpstanNeonPath]);
     }
     return $success ? TRUE : FALSE;
   }
diff --git a/src/Form/UpgradeStatusForm.php b/src/Form/UpgradeStatusForm.php
index 720135f..f96ce9f 100644
--- a/src/Form/UpgradeStatusForm.php
+++ b/src/Form/UpgradeStatusForm.php
@@ -15,7 +15,7 @@ use GuzzleHttp\Cookie\CookieJar;
 use GuzzleHttp\Cookie\SetCookie;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\Response;
-
+use Psr\Log\LoggerInterface;
 
 class UpgradeStatusForm extends FormBase {
 
@@ -47,6 +47,13 @@ class UpgradeStatusForm extends FormBase {
    */
   protected $renderer;
 
+  /**
+   * The logger service.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   */
+  protected $logger;
+
   /**
    * {@inheritdoc}
    */
@@ -55,7 +62,8 @@ class UpgradeStatusForm extends FormBase {
       $container->get('upgrade_status.project_collector'),
       $container->get('keyvalue.expirable'),
       $container->get('upgrade_status.result_formatter'),
-      $container->get('renderer')
+      $container->get('renderer'),
+      $container->get('logger.channel.upgrade_status')
     );
   }
 
@@ -70,17 +78,21 @@ class UpgradeStatusForm extends FormBase {
    *   The scan result formatter service.
    * @param \Drupal\Core\Render\RendererInterface $renderer
    *   The renderer service.
+   * @param \Psr\Log\LoggerInterface $logger
+   *   The logger.
    */
   public function __construct(
     ProjectCollector $project_collector,
     KeyValueExpirableFactory $key_value_expirable,
     ScanResultFormatter $result_formatter,
-    RendererInterface $renderer
+    RendererInterface $renderer,
+    LoggerInterface $logger
   ) {
     $this->projectCollector = $project_collector;
     $this->releaseStore = $key_value_expirable->get('update_available_releases');
     $this->resultFormatter = $result_formatter;
     $this->renderer = $renderer;
+    $this->logger = $logger;
   }
 
   /**
@@ -391,6 +403,35 @@ class UpgradeStatusForm extends FormBase {
     $projects = $this->projectCollector->collectProjects();
     $submitted = $form_state->getValues();
 
+    // It is not possible to make an HTTP request to this same webserver
+    // if the host server is PHP itself, because it is single-threaded.
+    // See https://www.php.net/manual/en/features.commandline.webserver.php
+    $use_http = php_sapi_name() != 'cli-server';
+    // Log the selected processing method for project support purposes.
+    $this->logger->notice('Processing projects without HTTP sandboxing because the built-in PHP webserver does not allow for that.');
+    $php_server = !$use_http;
+
+    // Attempt to do an HTTP request to the frontpage of this Drupal instance.
+    // If that does not work then we'll not be able to process projects over
+    // HTTP. Processing projects directly is less safe (in case of PHP fatal
+    // errors the batch process may halt), but we have no other choice here
+    // but to take a chance.
+    try {
+      $front = Url::fromRoute('<front>');
+      $response = \Drupal::httpClient()->get($front->setAbsolute()->toString());
+      if ($response->getStatusCode() != 200) {
+        $use_http = FALSE;
+      }
+    }
+    catch (\Exception $e) {
+      $use_http = FALSE;
+    }
+
+    // Log the selected processing method for project support purposes.
+    if (!$use_http && !$php_server) {
+      $this->logger->notice('Processing projects without HTTP sandboxing because a sample HTTP request to the server failed.');
+    }
+
     foreach (['custom', 'contrib'] as $type) {
       if (!empty($submitted[$type])) {
         foreach($submitted[$type]['data']['data'] as $project => $checked) {
@@ -398,7 +439,7 @@ class UpgradeStatusForm extends FormBase {
             // If the checkbox was checked, add a batch operation.
             $operations[] = [
               static::class . '::parseProject',
-              [$projects[$type][$project]]
+              [$projects[$type][$project], $use_http]
             ];
           }
         }
@@ -485,16 +526,17 @@ class UpgradeStatusForm extends FormBase {
    *
    * @param \Drupal\Core\Extension\Extension $extension
    *   The extension to analyze.
+   * @param bool $use_http
+   *   Whether to use HTTP to execute the processing or execute locally. HTTP
+   *   processing could fail in some container setups. Local processing may
+   *   fail due to timeout or memory limits.
    * @param array $context
    *   Batch context.
    */
-  public static function parseProject(Extension $extension, &$context) {
+  public static function parseProject(Extension $extension, $use_http, &$context) {
     $context['message'] = t('Completed @project.', ['@project' => $extension->getName()]);
 
-    // It is not possible to make an HTTP request to this same webserver
-    // if the host server is PHP itself, because it is single-threaded.
-    // See https://www.php.net/manual/en/features.commandline.webserver.php
-    if (php_sapi_name() == 'cli-server') {
+    if (!$use_http) {
       \Drupal::service('upgrade_status.deprecation_analyzer')->analyze($extension);
       return;
     }
<?php

/**
 * @file
 * Adds a Bitdash HTML5 Adaptive Player as a Drupal field.
 */

use Drupal\Core\Form\FormStateInterface;

define('BITDASH_PLAYER_CDN_URL', '//bitmovin-a.akamaihd.net/bitdash/latest/bitdash.min.js');

/**
 * Value callback for storing authentication in a not directly readable format.
 *
 * @see bitdash_player_field_instance_settings_form()
 */
function target_ftp_auth_value($element, $input = FALSE, FormStateInterface $form_state) {
  $settings = $form_state->getValue('settings');

  // Here we prevent the password from getting lost after submitting the form
  // without changing the password.
  $previous_auth = bitdash_player_parse_auth($element['#default_value']);
  if (empty($settings['pass'])) {
    $settings['pass'] = $previous_auth['pass'];
  }
  $form_state->setValue('settings', $settings);
  return base64_encode($settings['user'] . ':' . $settings['pass']);
}

/**
 * Parses an encrypted authenticaton string.
 *
 * @return (array)
 *   The username and password.
 *
 * @todo: We need better encryption.
 */
function bitdash_player_parse_auth($string) {
  $auth = explode(':', base64_decode($string));
  return [
    'user' => (isset($auth[0]) ? $auth[0] : ''),
    'pass' => (isset($auth[1]) ? $auth[1] : ''),
  ];
}

/**
 * Implements hook_theme().
 */
function bitdash_player_theme() {
  return [
    'bitdash_player_encode_status' => [
      'variables' => ['item' => NULL],
    ],
  ];
}

/**
 * Theme function for encode status messages.
 *
 * @see bitdash_player_field_formatter_view()
 */
function theme_bitdash_player_encode_status($variables) {
  $item = $variables['item'];

  $status_message = _bitdash_player_encode_status_message($item['encode_status']);
  $classes = [
    'bitdash-player-encode-status',
    'messages',
  ];

  $classes = implode(' ', $classes);
  return '<div class="' . $classes . '">' . $status_message . '</div>';
}

/**
 * Helper function for the possible status messages.
 */
function _bitdash_player_encode_status_message($status) {
  $messages = [
    BitdashPlayerEncode::VIDEO_STATUS_FAILURE => t('There was an error during the encoding process. Please refer to the watchdog log messages.'),
    BitdashPlayerEncode::VIDEO_STATUS_WAITING => t('The video file has been marked ready for encoding.'),
    BitdashPlayerEncode::VIDEO_STATUS_ENCODING => t('The encoding process has started'),
    BitdashPlayerEncode::VIDEO_STATUS_DONE => t('The encoding was complete.'),
  ];
  return $messages[$status];
}

/**
 * Little helper function for setting the status for a single file value.
 */
function _bitdash_player_field_set_encode_status($field_name, $fid, $status) {
  db_update('field_data_' . $field_name)
    ->condition($field_name . '_fid', $fid)
    ->fields([$field_name . '_encode_status' => $status])
    ->execute();

  \Drupal::entityManager()->clearCachedFieldDefinitions();
}
